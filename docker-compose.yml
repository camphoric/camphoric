volumes:
    db:

services:
  postgres:
    image: postgres:15-alpine
    env_file:
      - ./env/local/shared.env
      - ./env/local/postgres.env
    ports:
      - "5434:5432"
    volumes:
      - db:/var/lib/postgresql/data/pgdata
      - ./postgres-initdb.sql:/docker-entrypoint-initdb.d/max_conns.sql
    healthcheck:
      test: [ "CMD-SHELL", "runuser", "-c", "$$POSTGRES_USER", "-c", "/usr/bin/pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 3

  django:
    env_file:
      - ./env/local/shared.env
      - ./env/local/django.env
    build: server/
    volumes:
      - ./server:/app
    command: >
      bash -c "./manage.py migrate &&
               ./manage.py collectstatic --no-input &&
               ./manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
#   healthcheck:
#     test: [ "CMD-SHELL", "wget -qO- http://localhost:8000/api/user || exit 1" ]
#     interval: 30s
#     timeout: 5s
#     retries: 3

  react:
    env_file:
      - ./env/local/shared.env
      - ./env/local/react.env
    environment:
      VITE_API_PROXY: 'http://django:8000/'
    build:
      context: client
      shm_size: '2gb'
    volumes:
      - ./client:/app
      - /app/node_modules
    ports:
      - "3000:3000"
      - "3001:3001"
    command: npm start
#   depends_on:
#     django:
#       condition: service_healthy
#   healthcheck:
#     test: [ "CMD-SHELL", "wget -qO- --header 'Accept: */*' http://localhost:3000 || exit 1" ]
#     interval: 30s
#     timeout: 5s
#     retries: 3

  data:
    env_file:
      - ./env/local/shared.env
      - ./env/local/react.env
    build:
      context: data
      shm_size: '2gb'
    volumes:
      - ./data:/app
      - ./data/import:/usr/local/bin/import
      - /app/node_modules
#   depends_on:
#     django:
#       condition: service_healthy
